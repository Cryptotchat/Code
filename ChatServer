import java.math.BigInteger;
import java.rmi.*;
import java.rmi.server.UnicastRemoteObject;
import java.util.*;
 
public class ChatServer  extends UnicastRemoteObject implements ChatServerInt{
	
	private Vector v=new Vector();
	private Vector<BigInteger> listeclefpublicn = new Vector();
	private Vector<BigInteger> listeclefpublicc = new Vector();
	private Vector<BigInteger> listeclefpriveeu = new Vector();
	public Vector listenom = new Vector();
	public Vector listedecontact = new Vector();
	public Vector<ChatClientInt> listeclient = new Vector();
	public ChatServer() throws RemoteException{}
		
	public boolean seConnecter(ChatClientInt client) throws RemoteException{
		System.out.println(client.getName() + "  s'est connecté \n");
	/*	envoie(client.getName()+ " s'est connecté","");
		System.out.println("---");*/
		v.add(client);
		return true;

    }
	
	public void envoie(String s, String r, String m) throws RemoteException{
	    System.out.println("s = "+s);
	    System.out.println("liste client "+listenom);
        for (ChatClientInt i:listeclient) {
            i.tell(s, listeclefpublicn.elementAt(listenom.indexOf(r)), listeclefpriveeu.elementAt(listenom.indexOf(r)),r, m);
        }

	}



    @Override
    public void ajouter(ChatClientInt a) throws RemoteException {
        listeclient.add(a);
        System.out.println(listeclient.toString());
        System.out.println(a+" vient de se connecter \n");
    }

    @Override
    public void affiche() throws RemoteException {
        for (int i = 0; i < listenom.size();i++){
            System.out.println("l'élément "+i+" est nommé : "+listenom.get(i)+"\n"+" il a pour n :"+listeclefpublicn.get(i)+"\n"+"il a pour c "+listeclefpublicc.get(i)+"\n"+"il a pour u"+this.listeclefpriveeu.get(i)+"\n");

        }
    }


    public Vector estConnecté() throws RemoteException {
		return null;
	}

	public void publicationClé(BigInteger nclr, BigInteger cclr, BigInteger uclr, String nom) throws RemoteException{
			listeclefpublicn.add(nclr);
			listeclefpublicc.add(cclr);
			listeclefpriveeu.add(uclr);
			listenom.add(nom);
			System.out.println(listenom);
			System.out.println(listeclefpublicc);

	}

	public Vector getListeclefpublicn() throws RemoteException {
		return listeclefpublicn;
	}

	public Vector getListeclefpublicc() throws RemoteException{
		return listeclefpublicc;
	}

    public Vector getListeclefpriveeu() {
        return listeclefpriveeu;
    }

    public Vector getListeNom() throws RemoteException{
		return listenom;
	}
	
    public void ajoutecontact(String S) {
		for (int i = 0; i < listedecontact.size(); i++) {
		if (S.equals(listedecontact.get(i)));
	//	System.out.println("contact déja existant");
		}
		listedecontact.add(S);
	//	System.out.println(listedecontact);

}
    @Override
    public Vector recupere() throws RemoteException {
        return listedecontact;
    }
}
